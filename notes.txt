Dojo Weather Forecast
Create an app which presents the user with 6 different views (using the router-outlet) 
Each different url/view should present the user with a Dojo city. 
Within each of these views, present the user with the current weather information. 
Additionally, show an image of each of the cities, you can use https://www.pexels.com/ for royalty free images.

This assignment will require you to retrieve an API key from https://openweathermap.org/api

Use the following URL pattern for each city:

Default (root) url - 'http://localhost:4200/' should immediately redirect us to your local Dojo url. 
Seattle, WA - 'http://localhost:4200/seattle'
San Jose, CA - 'http://localhost:4200/sanjose'
Burbank, CA - 'http://localhost:4200/burbank'
Dallas, TX - 'http://localhost:4200/dallas'
Washington D.C. - 'http://localhost:4200/dc'
Chicago, IL - 'http://localhost:4200/chicago'

Each city is its own component
when compoent loads: 
1)retrieve promise from a service and update itself with the new data from the api call.
2)the service needs to make the api calls and returns the promise to any component the invokes its methods

REMINDER: When building applications which include forms and http requests, be sure to import the 'FormsModule' and 'HttpModule' in your AppModule file (referenced in the 'Installation & CLI' chapter).

1) start new project
ng new WeatherForecast

2) create a few components
cd..../WeatherForecast
ng g c seattle
ng g c sanjose

3) create routes to simply check for correct routing

app-routing.moudule.ts
put in the routes
const routes: Routes = [{}];

: Routes = [
  {
    //define rules
    //root will go to SeattleComponent.
    path:'',
    pathMatch: 'full',
    component: SeattleComponent,
    children:[]
  },
  //and so on for other components but with path values like 'sanjose'

4) create routelinks in app.component.html
<!-- go to root which is Seattle-->
<a [routerLink] = "['']">Seattle, WA</a> 
<!-- go to home -->
<a [routerLink] = "['sanjose']">San Jose, CA</a> 

--APP MODULE NEEDS HTTPCLIENT

5) the service needs to make the api calls and return the promise to any component the invokes its methods so that...
    a city view can retrieve that promise from a service and update itself with the new data from the api call.
    
    a) - get the service - 
        1) ng generate service weather
        2) Register our Service with our app.modules.ts file

    b) -in the service-
    make the api calls and return the promise
    
    import { Injectable } from '@angular/core';
    import { BehaviorSubject } from 'Rxjs';
    import { HttpClient, HttpParams } from '@angular/common/http';
    import {Observable} from 'rxjs/Observable';

    Injectable()
    export class DataService {
        private base = `https://...`
        temperature:number;
        temperature$ = new BehaviorSubject (0);

    constructor(private _http: HttpClient) { }

    retrieveWeather(city:String){
    this._http.get<any[]>(this.base+`${city}`+'/something').subscribe(
      (weatherArray:any[])=> {this.weatherArray$.next(weatherArray);}
    )
  }

